# ==================================================
# Grille
# ==================================================
#
# Grille is a sequencer that can handel 3 drum voices, 1 lead voice and 1
# bassline. It is life performance oriented.
# You will need 1 droid *master*, 2 *p2b8* and one *p10* to use it.
#
# Potential improvements:
# - Use a big pot for bassline variation
# - Reverse mute button light
# - Improve musicality and playability
#
# Latest version of this patch can be found here:
# https://github.com/alienlebarge/droid
#
# Diagram:
# ┌────────────────────────────────────┐
# │                                    │
# │                                    ▼
# │                      ...          ...         ...            ┌─────────┐
# │       ┌────────────▶(( ))        (( ))       (( ))◀──────────│Lead Act.│
# │       │              `''          `''         `''            └─────────┘
# │       │              ...          ...         ...            ┌─────────┐
# │       │        ┌───▶(( ))        (( ))       (( ))◀──────────│Lead Var.│
# │       │        │     `''          `''         `''            └─────────┘
# │  ┌─────────┐   │  .─.   .─.    .─.   .─.    .     .    ┌─────────┐ ┌─────────┐
# │  │Bassdrum │───┼▶(   ) (   )  (   ) (   )  ( )   ( )◀──│L. déjàvu│ │L. morphs│
# │  └─────────┘   │  `─'   `─'    `─'   `─'    '     '    └─────────┘ └─────────┘
# │  ┌─────────┐   │  .─.   .─.    .─.   .─.    .     .    ┌─────────┐ ┌─────────┐
# │  │  Snare  │───┴▶(   ) (   )  (   ) (   )  ( )   ( )◀──│L. lowp. │ │L. highp.│
# │  └─────────┘      `─'   `─'    `─'   `─'    '     '    └─────────┘ └─────────┘
# │  ┌─────────┐      .─.   .─.    .─.   .─.    .     .    ┌─────────┐ ┌─────────┐
# └──│  Hihat  │────▶(   ) (   )  (   ) (   )  ( )   ( )◀──│ BL Act. │ │ BL Var. │
#    └─────────┘      `─'   `─'    `─'   `─'    '     '    └─────────┘ └─────────┘
#    ┌─────────┐      .─.   .─.    .─.   .─.    .     .    ┌─────────┐ ┌─────────┐
#    │  Lead   │────▶(   ) (   )  (   ) (   )  ( )   ( )◀──│BL déjàvu│ │BL morphs│
#    └─────────┘      `─'   `─'    `─'   `─'    '     '    └─────────┘ └─────────┘
#                      ▲     ▲      ▲     ▲
#                      │     │      │     │
#                 ┌─────────┐│ ┌────┴────┐│
#                 │  Mute   ││ │  Spec.  ││
#                 └─────────┘│ └─────────┘│
#                       ┌────┴────┐  ┌────┴────┐
#                       │Dice pat.│  │Branches │
#                       └─────────┘  └─────────┘
#
# [Master]
# Input 1   : Clock
# Input 2   : Reset
# Input 3   :
# Input 4   :
# Input 5   : (led show bar 1)
# Input 6   : (led show bar 2)
# Input 7   : (led show bar 3)
# Input 8   : (led show bar 4)
# Output 1  : Bassdrum trigger
# Output 2  : Snare trigger
# Output 3  : Hihat trigger
# Output 4  :
# Output 5  : Lead gate
# Output 6  : Meleody pitch
# Output 7  : Bassline gate
# Output 8  : Bassline pitch

[p2b8]
# Pot 1.1   : Bassdrum Activity
# Pot 1.2   : Snare Activity
# Button 1.1: Bassdrum mute
# Button 1.2: Bassdrum dice
# Button 1.3: Snare mute
# Button 1.4: Snare dice
# Button 1.5: Hihat mute
# Button 1.6: HiHat dice
# Button 1.7: Lead mute
# Button 1.8: Lead next pattern

[p2b8]
# Pot 2.1   : Hihat Activity
# Pot 2.2   :
# Button 2.1: Bassdrum 4 on the floor
# Button 2.2: Bassdrum branches selection
# Button 2.3: Snaredrum 4 between each kick
# Button 2.4: Snaredrum branches selection
# Button 2.5:
# Button 2.6: Hihat branches selection
# Button 2.7: Lead pattern length. Switch between 3/7/16/24
# Button 2.8: Lead branches selection

[p10]
# Pot 3.1   : Lead activity
# Pot 3.2   : Lead variation
# Pot 3.3   : Lead déjàvu
# Pot 3.4   : Lead morphs
# Pot 3.5   : Lead lowpitch
# Pot 3.6   : Lead highpitch
# Pot 3.7   : Bassline activity
# Pot 3.8   : Bassline variation
# Pot 3.9   : Bassline déjàvu
# Pot 3.10  : Bassline morphs





# --------------------------------------------------
# Clock
# --------------------------------------------------

# A 120bpm lfo is normalized to N1 so when no clock is patched into I1, there's
# a default bpm of 120
[lfo]
    hz = 2
    square = N1

[copy]
    input = I1
    output = O4

[clocktool]
    clock = I1
    multiply = 4
    output = _CLOCK



# --------------------------------------------------
# Bassdrum
# --------------------------------------------------

# Branche selection
[fourstatebutton]
    button = B2.2
    led = L2.2
    value1 = 0
    value2 = 1
    value3 = 2
    value4 = 3
    output = _BD_BRANCHES



# Generate random triggers
[algoquencer]
    clock = _CLOCK
    reset = I2
    activity = P1.1
    reroll = B1.2
    trigger = _BD_TRIG_ALGO
    branches = _BD_BRANCHES
    barled1 = R5
    barled2 = R6
    barled3 = R7
    barled4 = R8



# Activate four on the floor triggers
[togglebutton]
    button = B2.1
    led = L2.1

# Convert clock gate to 4/4 trigger
# Clock are gate signal and we need triggers
[clocktool]
    clock = _CLOCK
    divide = 4
    dutycycle = 0.1
    output = _BD_TRIG_44

# If the led is activated the /4 trigger are unmuted
[logic]
    input1 = L2.1
    input2 = _BD_TRIG_44 # /4 rythme
    and = _BD_BD_TRIG_44



# Merge algoquencer and /4 triggers
[logic]
    input1 = _BD_TRIG_ALGO
    input2 = _BD_BD_TRIG_44
    or = _BD_TRIG



# Mute button for the whole bassdrum section
[togglebutton]
    button = B1.1
    led = L1.1



# Check if bassdrum is muted
# Negate led output to imitate algoquencer mute button states
[logic]
    input1 = L1.1
    negated = _BD_MUTE

[logic]
    input1 = _BD_TRIG
    input2 = _BD_MUTE
    and = O1





# --------------------------------------------------
# Snare
# --------------------------------------------------

# Branche selection
[fourstatebutton]
    button = B2.4
    led = L2.4
    value1 = 0
    value2 = 1
    value3 = 2
    value4 = 3
    output = _SD_BRANCHES



# Generate random triggers
[algoquencer]
    clock = _CLOCK
    reset = I2
    activity = P1.2
    reroll = B1.4
    trigger = _SD_TRIG_ALGO
    branches = _SD_BRANCHES
    offbeats = 0.7



# Activate four on the floor triggers
[togglebutton]
    button = B2.3
    led = L2.3

# Convert clock gate to 4/4 trigger with a phase of 50%
# 1. Gate signal are converted to triggers
# 2. Add a phase of 50% to have a snare between each bassdrum
[clocktool]
    clock = _CLOCK
    divide = 4
    output = _CLOCK_DIVIDE_4

[clocktool]
    clock = _CLOCK_DIVIDE_4
    dutycycle = 0.1 # [1.]
    delay = 0.5 # [2.]
    output = _SD_TRIG_44_50

# If the led is activated the /4 trigger are unmuted
[logic]
    input1 = L2.3
    input2 = _SD_TRIG_44_50
    and = _SD_TRIG_44



# Merge algoquencer and /4 triggers
[logic]
    input1 = _SD_TRIG_ALGO
    input2 = _SD_TRIG_44
    or = _SD_TRIG



# Mute button for the whole snare section
[togglebutton]
    button = B1.3
    led = L1.3



# Check if snare is muted
# Negate led output to imitate algoquencer mute button states
[logic]
    input1 = L1.3
    negated = _SD_MUTE

[logic]
    input1 = _SD_TRIG
    input2 = _SD_MUTE
    and = O2





# --------------------------------------------------
# Hihat
# --------------------------------------------------

# Branche selection
[fourstatebutton]
    button = B2.6
    led = L2.6
    value1 = 0
    value2 = 1
    value3 = 2
    value4 = 3
    output = _HH_BRANCHES



# Generate random triggers
[algoquencer]
    clock = _CLOCK
    reset = I2
    activity = P2.1
    reroll = B1.6
    trigger = _HH_TRIG_ALGO
    branches = _HH_BRANCHES
    offbeats = 0.3



# Activate 16th triggers
[togglebutton]
    button = B2.5
    led = L2.5

# Convert clock gate to 4/4 trigger
# Clock are gate signal and we need triggers
# Triggers are delayed to kick between each bassdrum
[clocktool]
    clock = _CLOCK
    divide = 2
    dutycycle = 0.1
    output = _HH_TRIG_16

# If the led is activated the /4 trigger are unmuted
[logic]
    input1 = L2.5
    input2 = _HH_TRIG_16
    and = _HH_HH_TRIG_16



# Merge algoquencer and /4 triggers
[logic]
    input1 = _HH_TRIG_ALGO
    input2 = _HH_HH_TRIG_16
    or = _HH_TRIG



# Mute button for the whole snare section
[togglebutton]
    button = B1.5
    led = L1.5



# Check if snare is muted
# Negate led output to imitate algoquencer mute button states
[logic]
    input1 = L1.5
    negated = _HH_MUTE

[logic]
    input1 = _HH_TRIG
    input2 = _HH_MUTE
    and = O3





# --------------------------------------------------
# Lead
# --------------------------------------------------

# Branche selection
[fourstatebutton]
    button = B2.8
    led = L2.8
    value1 = 0
    value2 = 1
    value3 = 2
    value4 = 3
    output = _LEAD_BRANCHES

# generate random gate length for more variation
[random]
    clock = _CLOCK
    output = _LEAD_GATE_LENGTH
    minimum = 0.5V
    maximum = 2V

# Pattern length selection
[fourstatebutton]
    button = B2.7
    led = L2.7
    value1 = 3
    value2 = 7
    value3 = 16
    value4 = 24
    output = _LEAD_PATTERN_LENGTH

[algoquencer]
    clock = _CLOCK
    pitch = _LEAD_UNQUANTIZED_PITCH
    gate = _LEAD_GATE
    length = _LEAD_PATTERN_LENGTH
    nextpattern = B1.8
    dejavu = P3.3
    morphs = P3.4
    activity = P3.1
    variation = P3.2
    fills = P3.5
    fillorder = 3
    gatelength = _LEAD_GATE_LENGTH
    branches = _LEAD_BRANCHES
    pitchlow = P3.5 * 5V
    pitchhigh = P3.6 * 5V

# Quantize lead pitch
[minifonion]
    input = _LEAD_UNQUANTIZED_PITCH + 0.6V
    root = 0 # C
    degree = 7 # natural minor
    output = O6

# # Mute button for lead gate
[togglebutton]
    button = B1.7
    led = L1.7

# Check if lead is muted
# Only gates are muted because pitch is used for bassline
# Negate led output to imitate algoquencer mute button states
[logic]
    input1 = L1.7
    negated = _LEAD_MUTE

[logic]
    input1 = _LEAD_GATE
    input2 = _LEAD_MUTE
    and = O5





# --------------------------------------------------
# Bassline
# --------------------------------------------------

# Algoquencer is only used to generate a bassline gate
[algoquencer]
    clock = _CLOCK
    gate = _BASSLINE_GATE
    length = 16
    activity = P3.7
    variation = P3.8
    dejavu = P3.9
    morphs = P3.10
    fillorder = 3
    branches = 2

# S&H lead pitch to generate bassline pitch
[sample]
    input = _LEAD_UNQUANTIZED_PITCH
    sample = _BASSLINE_GATE
    output = _BASSLINE_UNQUANTIZED_PITCH

# Output bassline gate
[copy]
    input = _BASSLINE_GATE
    output = O7

# Quantize bassline pitch
[minifonion]
    input = _BASSLINE_UNQUANTIZED_PITCH
    root = 0 # C
    degree = 7 # natural minor
    output = O8
